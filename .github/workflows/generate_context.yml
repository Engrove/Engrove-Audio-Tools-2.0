# .github/workflows/generate_context.yml
#
# HISTORIK:
# * v1.0 (Initial): Basversion för att köra skript och publicera.
# * v2.0 (Post-Tribunal): Förbättrad version efter "Help me God"-granskning.
# * v3.0 (Enhanced): Robust felhantering, cachning och validering.
# * v4.0 (AI Data Dump): Omdesignad för att skapa en ren HTML-sida avsedd för AI-konsumtion.
#   - FÖRBÄTTRAR: index.html genereras nu som en strikt datakälla.
#   - LÄGGER TILL: JSON-innehållet bäddas in direkt i HTML-koden för enkel parsning.
#   - FÖRENKLAR: Tar bort all onödig formatering och länkar.
#
# TILLÄMPADE REGLER (Frankensteen v3.7):
# - Robust felhantering med explicit validering i varje kritiskt steg.
# - Prestanda-optimering genom cachning.
# - Säkerhet genom minimala behörigheter och säker tokenhantering.
# - Observabilitet genom strukturerad loggning.

name: Generate and Deploy AI Context Page

# KÖR VID: Varje push till main-branchen, manuell start, eller vid schemalagd tid.
on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.vue'
      - '**/*.html'
      - '**/*.md'
      - '.github/workflows/generate_context.yml'
      - 'requirements.txt'
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

# BEHÖRIGHETER: Minimala behörigheter enligt säkerhetsprinciper.
permissions:
  contents: read
  pages: write
  id-token: write
  issues: write

# Globala miljövariabler
env:
  PYTHON_VERSION: '3.11'
  CONTEXT_FILE: 'context.json'
  METADATA_FILE: 'metadata.json'
  SITE_DIR: '_site'

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    outputs:
      context-generated: ${{ steps.generate.outputs.success }}

    steps:
      # Steg 1: Checka ut koden från repositoryt.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Steg 2: Sätt upp Python-miljön med cachning.
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Steg 3: Installera Python-beroenden.
      - name: Install Dependencies
        run: |
          echo "$(date -Iseconds) [INFO] Installerar Python-beroenden från requirements.txt..."
          pip install --upgrade pip
          pip install -r requirements.txt
          echo "$(date -Iseconds) [INFO] Beroenden installerade framgångsrikt."

      # Steg 4: Validera att skriptet finns.
      - name: Validate Script Existence
        run: |
          if [ ! -f "scripts/generate_full_context.py" ]; then
            echo "$(date -Iseconds) [ERROR] Skriptet scripts/generate_full_context.py hittades inte!"
            exit 1
          fi
          echo "$(date -Iseconds) [INFO] Skript validerat framgångsrikt."

      # Steg 5: Förbered output-mapp.
      - name: Prepare Output Directory
        run: mkdir -p ${{ env.SITE_DIR }}

      # Steg 6: Kör kontext-genereringsskriptet.
      - name: Generate Context JSON
        id: generate
        run: |
          echo "$(date -Iseconds) [INFO] Startar kontextgenerering..."
          if python scripts/generate_full_context.py > ${{ env.SITE_DIR }}/${{ env.CONTEXT_FILE }} 2> generation.log; then
            echo "$(date -Iseconds) [INFO] Skript kördes framgångsrikt."
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "$(date -Iseconds) [ERROR] Skriptet misslyckades!"
            cat generation.log
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "$(date -Iseconds) [INFO] Logg från skriptkörning:"
          cat generation.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Steg 7: Validera genererad JSON-fil.
      - name: Validate Generated JSON
        run: |
          FILE_PATH="${{ env.SITE_DIR }}/${{ env.CONTEXT_FILE }}"
          if [ ! -f "$FILE_PATH" ]; then
            echo "[ERROR] Kontextfil skapades inte!" && exit 1
          fi
          if [ "$(stat -c%s "$FILE_PATH")" -lt 100 ]; then
            echo "[ERROR] Filen är för liten, troligen tom." && exit 1
          fi
          if ! python -m json.tool "$FILE_PATH" > /dev/null; then
            echo "[ERROR] Filen innehåller ogiltig JSON!" && exit 1
          fi
          echo "[INFO] JSON validerad framgångsrikt."

      # Steg 8: Skapa metadata-fil.
      - name: Create Metadata
        run: |
          cat > ${{ env.SITE_DIR }}/${{ env.METADATA_FILE }} << EOF
          {
            "generated_at": "$(date -Iseconds)",
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "repository": "${{ github.repository }}"
          }
          EOF
          echo "[INFO] Metadata skapad."

      # Steg 9: Skapa strikt index.html för AI-kontext.
      - name: Create index.html for AI Context
        run: |
          INDEX_PATH="${{ env.SITE_DIR }}/index.html"
          CONTEXT_PATH="${{ env.SITE_DIR }}/${{ env.CONTEXT_FILE }}"
          METADATA_PATH="${{ env.SITE_DIR }}/${{ env.METADATA_FILE }}"

          # Starta HTML-filen med AI-beskrivningen
          cat > "$INDEX_PATH" << 'EOF'
          <!DOCTYPE html>
          <html lang="sv">
          <head>
              <meta charset="UTF-8">
              <title>AI Projektkontext: Engrove Audio Tools</title>
          </head>
          <body>
              <header>
                  <h1>AI Projektkontext: Engrove Audio Tools</h1>
                  <p>Detta dokument är en automatgenererad datakälla avsedd för AI-modeller som Google Gemini. Sidan innehåller den fullständiga kontexten för GitHub-repot Engrove/Engrove-Audio-Tools-2.0, uppdelad i sektioner. All data presenteras i råformat för att underlätta maskinell parsning och analys.</p>
              </header>
              <main>
                  <section id="context-json">
                      <h2>Fullständig Projektkontext (context.json)</h2>
                      <p>Följande JSON-objekt innehåller en komplett, rekursiv trädstruktur över alla filer i projektet. Varje filobjekt inkluderar metadata som filstorlek, filändelse, samt extraherade kommentarer och kodberoenden (för textfiler).</p>
                      <pre><code>
          EOF

          # Bädda in innehållet från context.json
          cat "$CONTEXT_PATH" >> "$INDEX_PATH"

          # Fortsätt med metadata.json
          cat >> "$INDEX_PATH" << 'EOF'
                      </code></pre>
                  </section>
                  <section id="metadata-json">
                      <h2>Byggmetadata (metadata.json)</h2>
                      <p>Följande JSON-objekt innehåller metadata om den specifika GitHub Actions-körning som genererade detta dokument, inklusive tidsstämpel, commit-SHA och repository-information.</p>
                      <pre><code>
          EOF

          # Bädda in innehållet från metadata.json
          cat "$METADATA_PATH" >> "$INDEX_PATH"

          # Avsluta HTML-filen
          cat >> "$INDEX_PATH" << 'EOF'
                      </code></pre>
                  </section>
              </main>
          </body>
          </html>
          EOF
          echo "[INFO] index.html för AI-kontext skapad."

      # Steg 10: Ladda upp artefakt för GitHub Pages.
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

  # Deploy-jobb som bara körs om build lyckades
  deploy:
    needs: validate-and-build
    if: needs.validate-and-build.outputs.context-generated == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
