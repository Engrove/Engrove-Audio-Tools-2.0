# .github/workflows/generate_context.yml
#
# HISTORIK:
# * v1.0 - v9.0: Tidigare versioner.
# * v10.0 (Post-Tribunal Revision): Felaktig implementering med `python -c`.
# * v11.0 (Syntax Correction): Korrigerat YAML-syntaxfelet genom att ersätta den bräckliga
#   `python -c`-metoden med en robust "here document" (`python - <<'EOF'`). Detta separerar
#   YAML/shell-syntax från Python-syntaxen och garanterar korrekta indrag.
#
# TILLÄMPADE REGLER (Frankensteen v3.7):
# - Robust felhantering med explicit validering i varje kritiskt steg.
# - Prestanda-optimering genom cachning.
# - Säkerhet genom minimala behörigheter och säker tokenhantering.
# - Observabilitet genom strukturerad loggning.

name: Generate and Deploy AI Context Data

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.vue'
      - '**/*.html'
      - '**/*.md'
      - '.github/workflows/generate_context.yml'
      - 'requirements.txt'
      - 'docs/**.md'
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  CONTEXT_FILE_JSON: 'context.json'
  CONTEXT_FILE_HTML: 'context.html'
  METADATA_FILE: 'metadata.json'
  SITE_DIR: '_site'

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    outputs:
      context-generated: ${{ steps.generate.outputs.success }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: pip install --upgrade pip && pip install -r requirements.txt

      - name: Prepare Output Directory
        run: mkdir -p ${{ env.SITE_DIR }}

      - name: Generate and Wrap Context Data
        id: generate
        run: |
          # Steg 1: Generera den råa JSON-datan och kontrollera att skriptet lyckas.
          if ! python scripts/generate_full_context.py > ${{ env.SITE_DIR }}/${{ env.CONTEXT_FILE_JSON }} 2> generation.log; then
            echo "[ERROR] Python-skriptet för kontextgenerering misslyckades. Se logg nedan:"
            cat generation.log
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "[INFO] Rå context.json genererades framgångsrikt."

          # Steg 2: Använd en "here document" (<<'EOF') för att säkert skicka ett Python-skript
          # via stdin. Detta är den robusta metoden som undviker alla syntaxproblem.
          python - <<'EOF'
import sys
from pathlib import Path

# Hämta miljövariabler som skickats från shellen
site_dir_str = sys.argv[1]
json_filename = sys.argv[2]
html_filename = sys.argv[3]

site_dir = Path(site_dir_str)
json_path = site_dir / json_filename
html_path = site_dir / html_filename

html_template = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>AI Context Data</title>
    <style>body {{ font-family: monospace; white-space: pre; word-wrap: break-word; }}</style>
</head>
<body>
{json_content}
</body>
</html>"""

try:
    json_content = json_path.read_text(encoding='utf-8')
    # Innehållet placeras direkt i body. CSS-regeln 'white-space: pre'
    # ser till att formateringen (inklusive radbrytningar) bevaras.
    final_html = html_template.format(json_content=json_content)
    html_path.write_text(final_html, encoding='utf-8')
    print(f'[INFO] Omslutning av JSON i {html_path} lyckades.')
except Exception as e:
    print(f'[ERROR] Misslyckades att omsluta JSON i HTML: {e}', file=sys.stderr)
    sys.exit(1)
EOF
          # Slutgiltig kontroll och sätt output för nästa jobb.
          if [ -f "${{ env.SITE_DIR }}/${{ env.CONTEXT_FILE_HTML }}" ]; then
            echo "[INFO] context.html skapad. Byggsteget lyckades."
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "[ERROR] context.html skapades inte. Byggsteget misslyckades."
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Metadata
        if: steps.generate.outputs.success == 'true'
        run: |
          cat > ${{ env.SITE_DIR }}/${{ env.METADATA_FILE }} << EOF
          {
            "generated_at": "$(date -Iseconds)",
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "repository": "${{ github.repository }}"
          }
          EOF
          echo "[INFO] metadata.json skapad."

      - name: Upload Pages Artifact
        if: steps.generate.outputs.success == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

  deploy:
    needs: validate-and-build
    if: needs.validate-and-build.outputs.context-generated == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
