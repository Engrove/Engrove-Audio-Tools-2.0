name: Generate and Deploy AI Context Data

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.vue'
      - '**/*.html'
      - '**/*.md'
      - '.github/workflows/generate_context.yml'
      - 'requirements.txt'
      - 'docs/**.md'
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  SITE_DIR: '_site'
  JSON_FILE: 'context.json'
  HTML_FILE: 'index.html'
  METADATA_FILE: 'metadata.json'
  # Valfritt: injicera plugin (t.ex. Patch Center). Lämna tom om inget plugin ska bäddas in.
  PLUGIN_PATH: 'scripts/plugins/patch_center.py'

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    outputs:
      context-generated: ${{ steps.create-html.outputs.success }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare Output Directory
        run: mkdir -p "${{ env.SITE_DIR }}"

      - name: Generate Raw Context JSON (with sha256_lf + hash_index)
        id: generate-json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          if python scripts/generate_full_context.py > "${{ env.SITE_DIR }}/${{ env.JSON_FILE }}" 2> generation.log; then
            echo "success=true" >> "$GITHUB_OUTPUT"
          else
            echo "success=false" >> "$GITHUB_OUTPUT"
            cat generation.log
            exit 1
          fi

      - name: Create HTML Wrapper (optional plugin)
        id: create-html
        if: steps.generate-json.outputs.success == 'true'
        run: |
          set -e
          if [ -n "${{ env.PLUGIN_PATH }}" ] && [ -f "${{ env.PLUGIN_PATH }}" ]; then
            echo "Using plugin: ${{ env.PLUGIN_PATH }}"
            python scripts/wrap_json_in_html.py "${{ env.SITE_DIR }}/${{ env.HTML_FILE }}" "${{ env.PLUGIN_PATH }}"
          else
            python scripts/wrap_json_in_html.py "${{ env.SITE_DIR }}/${{ env.HTML_FILE }}"
          fi
          echo "success=true" >> "$GITHUB_OUTPUT"

      - name: Create Metadata
        if: steps.create-html.outputs.success == 'true'
        run: |
          cat > "${{ env.SITE_DIR }}/${{ env.METADATA_FILE }}" << EOF
          {
            "generated_at": "$(date -Iseconds)",
            "workflow_run_id": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "repository": "${{ github.repository }}"
          }
          EOF

      - name: Upload Pages Artifact
        if: steps.create-html.outputs.success == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.SITE_DIR }}

  deploy:
    needs: validate-and-build
    if: needs.validate-and-build.outputs.context-generated == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
